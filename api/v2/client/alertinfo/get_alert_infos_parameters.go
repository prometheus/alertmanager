// Code generated by go-swagger; DO NOT EDIT.

// Copyright Prometheus Team
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package alertinfo

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAlertInfosParams creates a new GetAlertInfosParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAlertInfosParams() *GetAlertInfosParams {
	return &GetAlertInfosParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAlertInfosParamsWithTimeout creates a new GetAlertInfosParams object
// with the ability to set a timeout on a request.
func NewGetAlertInfosParamsWithTimeout(timeout time.Duration) *GetAlertInfosParams {
	return &GetAlertInfosParams{
		timeout: timeout,
	}
}

// NewGetAlertInfosParamsWithContext creates a new GetAlertInfosParams object
// with the ability to set a context for a request.
func NewGetAlertInfosParamsWithContext(ctx context.Context) *GetAlertInfosParams {
	return &GetAlertInfosParams{
		Context: ctx,
	}
}

// NewGetAlertInfosParamsWithHTTPClient creates a new GetAlertInfosParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAlertInfosParamsWithHTTPClient(client *http.Client) *GetAlertInfosParams {
	return &GetAlertInfosParams{
		HTTPClient: client,
	}
}

/*
GetAlertInfosParams contains all the parameters to send to the API endpoint

	for the get alert infos operation.

	Typically these are written to a http.Request.
*/
type GetAlertInfosParams struct {

	/* Active.

	   Show active alerts

	   Default: true
	*/
	Active *bool

	/* Filter.

	   A list of matchers to filter alerts by
	*/
	Filter []string

	/* GroupID.

	   A list of group IDs to filter alerts by
	*/
	GroupID []string

	/* Inhibited.

	   Show inhibited alerts

	   Default: true
	*/
	Inhibited *bool

	/* MaxResults.

	   The maximum number of alert to return in one getAlertInfos operation.
	*/
	MaxResults *int64

	/* NextToken.

	   The token for the next set of items to return
	*/
	NextToken *string

	/* Receiver.

	   A regex matching receivers to filter alerts by
	*/
	Receiver *string

	/* Silenced.

	   Show silenced alerts

	   Default: true
	*/
	Silenced *bool

	/* Unprocessed.

	   Show unprocessed alerts

	   Default: true
	*/
	Unprocessed *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get alert infos params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAlertInfosParams) WithDefaults() *GetAlertInfosParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get alert infos params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAlertInfosParams) SetDefaults() {
	var (
		activeDefault = bool(true)

		inhibitedDefault = bool(true)

		silencedDefault = bool(true)

		unprocessedDefault = bool(true)
	)

	val := GetAlertInfosParams{
		Active:      &activeDefault,
		Inhibited:   &inhibitedDefault,
		Silenced:    &silencedDefault,
		Unprocessed: &unprocessedDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get alert infos params
func (o *GetAlertInfosParams) WithTimeout(timeout time.Duration) *GetAlertInfosParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get alert infos params
func (o *GetAlertInfosParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get alert infos params
func (o *GetAlertInfosParams) WithContext(ctx context.Context) *GetAlertInfosParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get alert infos params
func (o *GetAlertInfosParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get alert infos params
func (o *GetAlertInfosParams) WithHTTPClient(client *http.Client) *GetAlertInfosParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get alert infos params
func (o *GetAlertInfosParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActive adds the active to the get alert infos params
func (o *GetAlertInfosParams) WithActive(active *bool) *GetAlertInfosParams {
	o.SetActive(active)
	return o
}

// SetActive adds the active to the get alert infos params
func (o *GetAlertInfosParams) SetActive(active *bool) {
	o.Active = active
}

// WithFilter adds the filter to the get alert infos params
func (o *GetAlertInfosParams) WithFilter(filter []string) *GetAlertInfosParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the get alert infos params
func (o *GetAlertInfosParams) SetFilter(filter []string) {
	o.Filter = filter
}

// WithGroupID adds the groupID to the get alert infos params
func (o *GetAlertInfosParams) WithGroupID(groupID []string) *GetAlertInfosParams {
	o.SetGroupID(groupID)
	return o
}

// SetGroupID adds the groupId to the get alert infos params
func (o *GetAlertInfosParams) SetGroupID(groupID []string) {
	o.GroupID = groupID
}

// WithInhibited adds the inhibited to the get alert infos params
func (o *GetAlertInfosParams) WithInhibited(inhibited *bool) *GetAlertInfosParams {
	o.SetInhibited(inhibited)
	return o
}

// SetInhibited adds the inhibited to the get alert infos params
func (o *GetAlertInfosParams) SetInhibited(inhibited *bool) {
	o.Inhibited = inhibited
}

// WithMaxResults adds the maxResults to the get alert infos params
func (o *GetAlertInfosParams) WithMaxResults(maxResults *int64) *GetAlertInfosParams {
	o.SetMaxResults(maxResults)
	return o
}

// SetMaxResults adds the maxResults to the get alert infos params
func (o *GetAlertInfosParams) SetMaxResults(maxResults *int64) {
	o.MaxResults = maxResults
}

// WithNextToken adds the nextToken to the get alert infos params
func (o *GetAlertInfosParams) WithNextToken(nextToken *string) *GetAlertInfosParams {
	o.SetNextToken(nextToken)
	return o
}

// SetNextToken adds the nextToken to the get alert infos params
func (o *GetAlertInfosParams) SetNextToken(nextToken *string) {
	o.NextToken = nextToken
}

// WithReceiver adds the receiver to the get alert infos params
func (o *GetAlertInfosParams) WithReceiver(receiver *string) *GetAlertInfosParams {
	o.SetReceiver(receiver)
	return o
}

// SetReceiver adds the receiver to the get alert infos params
func (o *GetAlertInfosParams) SetReceiver(receiver *string) {
	o.Receiver = receiver
}

// WithSilenced adds the silenced to the get alert infos params
func (o *GetAlertInfosParams) WithSilenced(silenced *bool) *GetAlertInfosParams {
	o.SetSilenced(silenced)
	return o
}

// SetSilenced adds the silenced to the get alert infos params
func (o *GetAlertInfosParams) SetSilenced(silenced *bool) {
	o.Silenced = silenced
}

// WithUnprocessed adds the unprocessed to the get alert infos params
func (o *GetAlertInfosParams) WithUnprocessed(unprocessed *bool) *GetAlertInfosParams {
	o.SetUnprocessed(unprocessed)
	return o
}

// SetUnprocessed adds the unprocessed to the get alert infos params
func (o *GetAlertInfosParams) SetUnprocessed(unprocessed *bool) {
	o.Unprocessed = unprocessed
}

// WriteToRequest writes these params to a swagger request
func (o *GetAlertInfosParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Active != nil {

		// query param active
		var qrActive bool

		if o.Active != nil {
			qrActive = *o.Active
		}
		qActive := swag.FormatBool(qrActive)
		if qActive != "" {

			if err := r.SetQueryParam("active", qActive); err != nil {
				return err
			}
		}
	}

	if o.Filter != nil {

		// binding items for filter
		joinedFilter := o.bindParamFilter(reg)

		// query array param filter
		if err := r.SetQueryParam("filter", joinedFilter...); err != nil {
			return err
		}
	}

	if o.GroupID != nil {

		// binding items for groupId
		joinedGroupID := o.bindParamGroupID(reg)

		// query array param groupId
		if err := r.SetQueryParam("groupId", joinedGroupID...); err != nil {
			return err
		}
	}

	if o.Inhibited != nil {

		// query param inhibited
		var qrInhibited bool

		if o.Inhibited != nil {
			qrInhibited = *o.Inhibited
		}
		qInhibited := swag.FormatBool(qrInhibited)
		if qInhibited != "" {

			if err := r.SetQueryParam("inhibited", qInhibited); err != nil {
				return err
			}
		}
	}

	if o.MaxResults != nil {

		// query param maxResults
		var qrMaxResults int64

		if o.MaxResults != nil {
			qrMaxResults = *o.MaxResults
		}
		qMaxResults := swag.FormatInt64(qrMaxResults)
		if qMaxResults != "" {

			if err := r.SetQueryParam("maxResults", qMaxResults); err != nil {
				return err
			}
		}
	}

	if o.NextToken != nil {

		// query param nextToken
		var qrNextToken string

		if o.NextToken != nil {
			qrNextToken = *o.NextToken
		}
		qNextToken := qrNextToken
		if qNextToken != "" {

			if err := r.SetQueryParam("nextToken", qNextToken); err != nil {
				return err
			}
		}
	}

	if o.Receiver != nil {

		// query param receiver
		var qrReceiver string

		if o.Receiver != nil {
			qrReceiver = *o.Receiver
		}
		qReceiver := qrReceiver
		if qReceiver != "" {

			if err := r.SetQueryParam("receiver", qReceiver); err != nil {
				return err
			}
		}
	}

	if o.Silenced != nil {

		// query param silenced
		var qrSilenced bool

		if o.Silenced != nil {
			qrSilenced = *o.Silenced
		}
		qSilenced := swag.FormatBool(qrSilenced)
		if qSilenced != "" {

			if err := r.SetQueryParam("silenced", qSilenced); err != nil {
				return err
			}
		}
	}

	if o.Unprocessed != nil {

		// query param unprocessed
		var qrUnprocessed bool

		if o.Unprocessed != nil {
			qrUnprocessed = *o.Unprocessed
		}
		qUnprocessed := swag.FormatBool(qrUnprocessed)
		if qUnprocessed != "" {

			if err := r.SetQueryParam("unprocessed", qUnprocessed); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetAlertInfos binds the parameter filter
func (o *GetAlertInfosParams) bindParamFilter(formats strfmt.Registry) []string {
	filterIR := o.Filter

	var filterIC []string
	for _, filterIIR := range filterIR { // explode []string

		filterIIV := filterIIR // string as string
		filterIC = append(filterIC, filterIIV)
	}

	// items.CollectionFormat: "multi"
	filterIS := swag.JoinByFormat(filterIC, "multi")

	return filterIS
}

// bindParamGetAlertInfos binds the parameter groupId
func (o *GetAlertInfosParams) bindParamGroupID(formats strfmt.Registry) []string {
	groupIDIR := o.GroupID

	var groupIDIC []string
	for _, groupIDIIR := range groupIDIR { // explode []string

		groupIDIIV := groupIDIIR // string as string
		groupIDIC = append(groupIDIC, groupIDIIV)
	}

	// items.CollectionFormat: "multi"
	groupIDIS := swag.JoinByFormat(groupIDIC, "multi")

	return groupIDIS
}
