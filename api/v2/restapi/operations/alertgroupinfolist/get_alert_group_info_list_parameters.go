// Code generated by go-swagger; DO NOT EDIT.

// Copyright Prometheus Team
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package alertgroupinfolist

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAlertGroupInfoListParams creates a new GetAlertGroupInfoListParams object
//
// There are no default values defined in the spec.
func NewGetAlertGroupInfoListParams() GetAlertGroupInfoListParams {

	return GetAlertGroupInfoListParams{}
}

// GetAlertGroupInfoListParams contains all the bound params for the get alert group info list operation
// typically these are obtained from a http.Request
//
// swagger:parameters getAlertGroupInfoList
type GetAlertGroupInfoListParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The maximum number of alert groups to return in one getAlertGroupInfoList operation.
	  In: query
	*/
	MaxResults *int64
	/*The token for the next set of items to return
	  In: query
	*/
	NextToken *string
	/*A regex matching receivers to filter alerts by
	  In: query
	*/
	Receiver *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetAlertGroupInfoListParams() beforehand.
func (o *GetAlertGroupInfoListParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qMaxResults, qhkMaxResults, _ := qs.GetOK("maxResults")
	if err := o.bindMaxResults(qMaxResults, qhkMaxResults, route.Formats); err != nil {
		res = append(res, err)
	}

	qNextToken, qhkNextToken, _ := qs.GetOK("nextToken")
	if err := o.bindNextToken(qNextToken, qhkNextToken, route.Formats); err != nil {
		res = append(res, err)
	}

	qReceiver, qhkReceiver, _ := qs.GetOK("receiver")
	if err := o.bindReceiver(qReceiver, qhkReceiver, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindMaxResults binds and validates parameter MaxResults from query.
func (o *GetAlertGroupInfoListParams) bindMaxResults(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("maxResults", "query", "int64", raw)
	}
	o.MaxResults = &value

	return nil
}

// bindNextToken binds and validates parameter NextToken from query.
func (o *GetAlertGroupInfoListParams) bindNextToken(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.NextToken = &raw

	return nil
}

// bindReceiver binds and validates parameter Receiver from query.
func (o *GetAlertGroupInfoListParams) bindReceiver(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Receiver = &raw

	return nil
}
