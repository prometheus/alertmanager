// Code generated by go-swagger; DO NOT EDIT.

// Copyright Prometheus Team
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package alertinfo

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/prometheus/alertmanager/api/v2/models"
)

// GetAlertInfosOKCode is the HTTP code returned for type GetAlertInfosOK
const GetAlertInfosOKCode int = 200

/*
GetAlertInfosOK Get alerts response

swagger:response getAlertInfosOK
*/
type GetAlertInfosOK struct {

	/*
	  In: Body
	*/
	Payload *models.GettableAlertInfos `json:"body,omitempty"`
}

// NewGetAlertInfosOK creates GetAlertInfosOK with default headers values
func NewGetAlertInfosOK() *GetAlertInfosOK {

	return &GetAlertInfosOK{}
}

// WithPayload adds the payload to the get alert infos o k response
func (o *GetAlertInfosOK) WithPayload(payload *models.GettableAlertInfos) *GetAlertInfosOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get alert infos o k response
func (o *GetAlertInfosOK) SetPayload(payload *models.GettableAlertInfos) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAlertInfosOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAlertInfosBadRequestCode is the HTTP code returned for type GetAlertInfosBadRequest
const GetAlertInfosBadRequestCode int = 400

/*
GetAlertInfosBadRequest Bad request

swagger:response getAlertInfosBadRequest
*/
type GetAlertInfosBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetAlertInfosBadRequest creates GetAlertInfosBadRequest with default headers values
func NewGetAlertInfosBadRequest() *GetAlertInfosBadRequest {

	return &GetAlertInfosBadRequest{}
}

// WithPayload adds the payload to the get alert infos bad request response
func (o *GetAlertInfosBadRequest) WithPayload(payload string) *GetAlertInfosBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get alert infos bad request response
func (o *GetAlertInfosBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAlertInfosBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetAlertInfosInternalServerErrorCode is the HTTP code returned for type GetAlertInfosInternalServerError
const GetAlertInfosInternalServerErrorCode int = 500

/*
GetAlertInfosInternalServerError Internal server error

swagger:response getAlertInfosInternalServerError
*/
type GetAlertInfosInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetAlertInfosInternalServerError creates GetAlertInfosInternalServerError with default headers values
func NewGetAlertInfosInternalServerError() *GetAlertInfosInternalServerError {

	return &GetAlertInfosInternalServerError{}
}

// WithPayload adds the payload to the get alert infos internal server error response
func (o *GetAlertInfosInternalServerError) WithPayload(payload string) *GetAlertInfosInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get alert infos internal server error response
func (o *GetAlertInfosInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAlertInfosInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
