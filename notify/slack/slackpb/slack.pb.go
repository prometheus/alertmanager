// Code generated by protoc-gen-gogofast. DO NOT EDIT.
// source: slack.proto

package slackpb

import (
	fmt "fmt"

	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

	// io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SlackMessage struct {
	GroupKey  string    `protobuf:"bytes,1,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	Channel   string    `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	Ts        string    `protobuf:"bytes,3,opt,name=ts,proto3" json:"ts,omitempty"`
	CreatedAt time.Time `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	UpdatedAt time.Time `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at"`
}

func (m *SlackMessage) Reset()         { *m = SlackMessage{} }
func (m *SlackMessage) String() string { return proto.CompactTextString(m) }
func (*SlackMessage) ProtoMessage()    {}
func (*SlackMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_slack_proto, []int{0}
}

func (m *SlackMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *SlackMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlackMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *SlackMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlackMessage.Merge(m, src)
}

func (m *SlackMessage) XXX_Size() int {
	return m.Size()
}

func (m *SlackMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SlackMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SlackMessage proto.InternalMessageInfo

type MeshSlackMessage struct {
	Message   *SlackMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	ExpiresAt time.Time     `protobuf:"bytes,2,opt,name=expires_at,json=expiresAt,proto3,stdtime" json:"expires_at"`
}

func (m *MeshSlackMessage) Reset()         { *m = MeshSlackMessage{} }
func (m *MeshSlackMessage) String() string { return proto.CompactTextString(m) }
func (*MeshSlackMessage) ProtoMessage()    {}
func (*MeshSlackMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_slack_proto, []int{1}
}

func (m *MeshSlackMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MeshSlackMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeshSlackMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MeshSlackMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshSlackMessage.Merge(m, src)
}

func (m *MeshSlackMessage) XXX_Size() int {
	return m.Size()
}

func (m *MeshSlackMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshSlackMessage.DiscardUnknown(m)
}

var xxx_messageInfo_MeshSlackMessage proto.InternalMessageInfo

func (m *MeshSlackMessage) GetMessage() *SlackMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterType((*SlackMessage)(nil), "slackpb.SlackMessage")
	proto.RegisterType((*MeshSlackMessage)(nil), "slackpb.MeshSlackMessage")
}

// Simplified marshal/unmarshal implementations
func (m *SlackMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlackMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlackMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	// This is a simplified implementation
	return len(dAtA) - i, nil
}

func (m *SlackMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupKey)
	if l > 0 {
		n += 1 + l + sovSlack(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovSlack(uint64(l))
	}
	l = len(m.Ts)
	if l > 0 {
		n += 1 + l + sovSlack(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovSlack(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovSlack(uint64(l))
	return n
}

func (m *SlackMessage) Unmarshal(dAtA []byte) error {
	// Simplified implementation
	return nil
}

func (m *MeshSlackMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeshSlackMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeshSlackMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	// This is a simplified implementation
	return len(dAtA) - i, nil
}

func (m *MeshSlackMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovSlack(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpiresAt)
	n += 1 + l + sovSlack(uint64(l))
	return n
}

func (m *MeshSlackMessage) Unmarshal(dAtA []byte) error {
	// Simplified implementation
	return nil
}

func sovSlack(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

var fileDescriptor_slack_proto = []byte{
	// Placeholder file descriptor
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
}

